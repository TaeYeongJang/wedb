<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="rawris.krc.rawris">
	
	<select id="get_addr_info" parameterType="CommonMap" resultType="CommonMap">
		SELECT ADDR_CODE
        FROM TB_API_ADDR_CODE
        WHERE FULL_ADDR = #{full_addr} 
        AND USE_YN = 'Y'
	</select>
	
	<select id="get_sisul" parameterType="CommonMap" resultType="CommonMap">
		SELECT *
          FROM KTD_WATER_SISUL
         WHERE 1=1
           AND FAC_CODE IN ('4579010352','2917010029','4617010152')
	</select>
	
	<select id="get_aws_new_list" parameterType="CommonMap" resultType="CommonMap">
        SELECT CASE WHEN B.TYPE = 1 THEN 'ASOS' ELSE 'AWS' END TYPE,
               A.AWSID,
               NVL (C.TODAY_RN, 0) TODAY_RN,
               NVL (D.SUM_RN, 0)   SUM_RN,
               NVL(R.SUM_RN, 0) AVG_RN, -- 평년 강수량
               CASE WHEN R.SUM_RN  IS NULL THEN 0
                    ELSE FUNC_MAX_NUMBER(ROUND(NVL (D.SUM_RN, 0) / NVL(GREATEST(R.SUM_RN, 1), 1)*100), 1000)
                END AS AVG_RATIO, -- 평년 대비 강수량
               A.OBSNM,
               A.LON               X,
               A.LAT               Y
          FROM TB_CD_KMA_AWS  A,
               (SELECT * FROM TB_CD_KMA_AWS_USE WHERE USE_YN = 'Y' <if test="type!=null" > and TYPE = #{type} </if>) B,
               (SELECT
                    STN_ID AWSID, SUM(RN / 10) TODAY_RN
                FROM TB_NJ_AWS_RAIN_1HR
                WHERE TM LIKE TO_CHAR (SYSDATE, 'YYYYMMDD') || '%'
                AND   RN > 0 GROUP BY STN_ID)  C,
               (SELECT SUM(RN / 10) SUM_RN, STN_ID AWSID FROM TB_NJ_AWS_RAIN_1HR WHERE RN <![CDATA[ > ]]> 0 AND TM BETWEEN #{s_start_date} || #{s_start_time} AND #{s_end_date} || #{s_end_time} GROUP BY STN_ID ORDER BY STN_ID ASC) D,
               (SELECT
                    AWSID,
                    SUM (RN) SUM_RN
                FROM TB_NJ_AWS_RAIN_AVG10_30
                WHERE MMDD IN (
                                SELECT
                                  TO_CHAR(YYYYMMDD, 'MMDD') MMDD
                                FROM
                                    (
                                    SELECT
                                    TO_DATE (#{s_start_date}, 'YYYYMMDD') + LEVEL - 1 AS YYYYMMDD
                                    FROM DUAL CONNECT BY (TO_DATE (#{s_start_date}, 'YYYYMMDD') + LEVEL - 1) <![CDATA[ <= ]]> TO_DATE (#{s_end_date}, 'YYYYMMDD')
                                )
                )
                GROUP BY AWSID
                ) R,
                TB_NJ_AWS_RAIN_AVG_NOT ARAN
         WHERE  A.AWSID = B.AWSID
         AND    A.AWSID = C.AWSID(+)
         AND    A.AWSID = D.AWSID(+)
         AND    A.AWSID = R.AWSID(+)
         AND    A.AWSID = ARAN.AWSID(+)
    <if test="NAME != null" >
         AND    OBSNM LIKE '%' || #{name} || '%'
    </if>
        ORDER BY A.OBSNM ASC
</select>

<select id="get_aws_test" parameterType="CommonMap" resultType="CommonMap">
         SELECT  A.AWSID,
                 A.OBSNM,
                 A.LON         X,
                 A.LAT         Y
          FROM TB_CD_KMA_AWS  A
     where rownum <![CDATA[ <= ]]>  10
</select>

<select id="get_water_Rate_fac" parameterType="CommonMap" resultType="CommonMap">
   WITH BASE AS (
	    SELECT A.FAC_CODE AS CODE
	         , B.EQUIP_NO
	         , A.FAC_NAME AS LABEL
	         , C.ADDR1||' '||C.ADDR2||' '||C.ADDR3||' '||C.ADDR4 AS ADDR
	         , F_KTD_BUSEO_JISANAME(A.BUSEO_CD) AS MNGT_ORG
	         , A.RSC_TYPE
	         , NVL(A.R_TOTAL_STORAGE, 0) AS TOTAL_STORAGE
	         , NVL(A.R_EFFEC_STORAGE, 0) AS EFFEC_STORAGE
	         , NVL(A.AREA_WATERSHED, 0) AS AREA_WATERSHED
	         , NVL(D.AREA_BENEFICIAL, NVL(A.AREA_BENEFICIAL, 0)) AS AREA_BENEFICIAL     
	         , D.DAEPYEO_JIBUN_X AS LON
	         , D.DAEPYEO_JIBUN_Y AS LAT
	         , A.AUTO_RVOW
	         , A.AUTO_DATE AS OBS_DATE
	    FROM RIMSHOME.KTD_WATER_SISUL A
	    LEFT JOIN TB_EQUIP_INFO_BASE@RAWRIS_NEW B ON A.FAC_CODE = B.EQUIP_STANDARD_CODE AND B.EQUIP_USE_YN = 'Y' AND B.EQUIP_MANAGEMENT_GBN_CODE = '01' AND B.FAC_KIND_CODE = '1' 
	    LEFT JOIN KTD_COMM_ADDR C ON A.JUSO_CD = C.ADDR_CODE
	    LEFT JOIN KTD_COMM_MAIN D ON A.FAC_CODE = D.FAC_CODE
	    WHERE A.FLAG IN ('1','2')
	    <if test='rscType == "main"'>
			 AND  RSC_TYPE LIKE '주수원' ||'%'
        </if>
        <if test='rscType == "sub"'>
			AND  RSC_TYPE NOT LIKE '주수원' ||'%'
        </if>
        <if test='facName != null'>
			AND  FAC_NAME LIKE '%' || #{facName} ||'%'
        </if>
 
	)
	, CCTV AS (
	    SELECT A.FAC_STANDARD_CODE, 'Y' AS CCTV_YN
	    FROM DB_TMTC.TB_CCTV_CAMERA_INFO@DBLINK_DB_TMTC A
	    INNER JOIN DB_TMTC.TB_CCTV_CAMERA_STATE@DBLINK_DB_TMTC B ON A.CCTV_CAMERA_NO = B.CAMERA_NO AND B.CAMERA_ACTIVE = 1
	    GROUP BY A.FAC_STANDARD_CODE
	)
	, RATE AS (
	    SELECT FAC_CODE, AUTO_ERR, VOW, YOOHYOY, RVOW
	    FROM (                                     
	        SELECT FAC_CODE
	             , CASE WHEN 'REAL' = #{realType} THEN AUTO_ERR ELSE '-' END AS AUTO_ERR
	             , ROW_NUMBER() OVER(PARTITION BY FAC_CODE ORDER BY CHECK_DATE DESC) AS RNUM
	             , VOW
	             , YOOHYOY
	             , RVOW
	        FROM KTD_WATER_RATE
	        WHERE CHECK_DATE BETWEEN TO_CHAR(SYSDATE-10, 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD') 
	        AND SABUN IS NOT NULL
	    )
	    WHERE RNUM = 1
	)
	, AVG10 AS (
	    SELECT FAC_CODE
	         , ROUND(AVG(VOW), 2) AS AVG_VOW
	         , ROUND(AVG(YOOHYOY), 2) AS AVG_YOOHYOY
	    FROM KTD_WATER_RATE
	    WHERE CHECK_DATE BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, -360), 'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(SYSDATE, -12), 'YYYYMMDD')
	    AND CHECK_MMDD = TO_CHAR(SYSDATE, 'MMDD')
	    GROUP BY FAC_CODE
	)
	, PREV AS (
	    SELECT FAC_CODE, VOW, YOOHYOY, RVOW
	    FROM (                                     
	        SELECT FAC_CODE
	             , ROW_NUMBER() OVER(PARTITION BY FAC_CODE ORDER BY CHECK_DATE DESC) AS RNUM
	             , VOW
	             , YOOHYOY
	             , RVOW
	        FROM KTD_WATER_RATE
	        WHERE CHECK_DATE BETWEEN TO_CHAR(SYSDATE-15, 'YYYYMMDD') AND TO_CHAR(SYSDATE-1, 'YYYYMMDD') 
	        AND SABUN IS NOT NULL
	    )
	    WHERE RNUM = 1
	)
	, RST AS (
	    SELECT A.*
	         , CASE WHEN C.AUTO_ERR = '9' THEN (A.AUTO_RVOW * C.YOOHYOY / 100) ELSE C.VOW END AS VOW
	         , C.YOOHYOY
	         , D.AVG_VOW
	         , D.AVG_YOOHYOY
	         , ROUND(E.RVOW, 1) AS PREV_RVOW
	         , NVL(B.CCTV_YN, 'N') AS CCTV_YN
	         , C.AUTO_ERR
	    FROM BASE A
	    LEFT JOIN CCTV B ON A.CODE = B.FAC_STANDARD_CODE   
	    LEFT JOIN RATE C ON A.CODE = C.FAC_CODE
	    LEFT JOIN AVG10 D ON A.CODE = D.FAC_CODE
	    LEFT JOIN PREV E ON A.CODE = E.FAC_CODE
	)
	, RST2 AS (
	    SELECT A.*
	         , CASE WHEN A.YOOHYOY IS NULL THEN 0 ELSE ROUND(NVL(A.VOW / A.YOOHYOY * 100, 0), 1) END AS RVOW
	         , ROUND(ROUND(NVL(A.AVG_VOW, A.VOW) / GREATEST(A.YOOHYOY, NVL(A.AVG_YOOHYOY, A.YOOHYOY)) * 100, 2), 1) AS AVG_RVOW
	    FROM RST A
	)
	, RST3 AS (
	    SELECT A.*
	         , ROUND(A.RVOW / DECODE(A.AVG_RVOW, 0, 1, A.AVG_RVOW) * 100, 1) AS AVG_RVOW_D
	    FROM RST2 A
	)
	SELECT A.CODE
	     , A.EQUIP_NO
	     , A.LABEL
	     , A.ADDR
	     , A.MNGT_ORG
	     , A.RSC_TYPE
	     , A.TOTAL_STORAGE
	     , A.EFFEC_STORAGE
	     , A.AREA_WATERSHED
	     , A.AREA_BENEFICIAL    
	     , NVL(A.VOW, 0) AS VOW
	     , NVL(A.YOOHYOY, 0) AS YOOHYOY
	     , NVL(A.AVG_VOW, 0) AS AVG_VOW
	     , NVL(A.AVG_YOOHYOY, 0) AS AVG_YOOHYOY
	     , NVL(A.RVOW, 0) AS RVOW
	     , NVL(A.PREV_RVOW, 0) AS PREV_RVOW
	     , NVL(A.AVG_RVOW, 0) AS AVG_RVOW
	     , NVL(A.AVG_RVOW_D, 0) AS AVG_RVOW_D
	     , A.LON
	     , A.LAT
	     , A.CCTV_YN
	     , COUNT(A.CODE) OVER(PARTITION BY A.CODE) AS TOT_CNT
	     <![CDATA[
	     , CASE WHEN AVG_RVOW_D <= 40 THEN 1 ELSE 0 END RED
	     , CASE WHEN AVG_RVOW_D > 40 AND AVG_RVOW_D <= 50 THEN 1 ELSE 0 END ORANGE
	     , CASE WHEN AVG_RVOW_D > 50 AND AVG_RVOW_D <= 60 THEN 1 ELSE 0 END YELLOW
	     , CASE WHEN AVG_RVOW_D > 60 OR AVG_RVOW_D IS NULL  THEN 1 ELSE 0 END BLUE
	     , CASE WHEN RVOW >= 90 THEN 1 ELSE 0 END CUR_RED
	     , CASE WHEN RVOW >= 80 AND RVOW < 90 THEN 1 ELSE 0 END CUR_ORANGE
	     , CASE WHEN RVOW >= 70 AND RVOW < 80 THEN 1 ELSE 0 END CUR_YELLOW
	     , CASE WHEN RVOW < 70 THEN 1 ELSE 0 END CUR_BLUE 
	     , CASE WHEN A.AVG_RVOW = 0 THEN 0 
                ELSE ROUND( RVOW / A.AVG_RVOW * 100 , 1)
            END                 AS PREPARE_RVOW
	     ]]>
	     , A.AUTO_ERR
	     , A.OBS_DATE
	FROM RST3 A
	WHERE LON IS NOT NULL
	AND LAT IS NOT NULL
	
</select>


<select id="get_real_status_info" parameterType="CommonMap" resultType="CommonMap">
	SELECT STATUS
	FROM TB_REAL_STATUS_INFO
  	WHERE INSERT_ID = #{user_id} AND MENU_CLASS = #{menu_class}
</select>
	
	
<select id="get_kma_report_list" parameterType="CommonMap" resultType="CommonMap">
	<![CDATA[
    SELECT * 
    FROM (
    	SELECT K60.T1, K60.T2, K60.TM_FC
    	FROM TB_KTKO60_INF_INFO K60,
             (
             	SELECT STN_ID, TM_FC, TM_SEQ
             	FROM TB_KTKO51_INF_INFO
             	WHERE STN_ID = '108'
                AND TM_FC >= '201707111100'
                AND WARN_VAR IN ('1', '2', '7') /* 1:강풍, 2:호우, 7:태풍 만 고려 */
              	GROUP BY STN_ID, TM_FC, TM_SEQ
        	 ) K51
		WHERE K60.STN_ID = K51.STN_ID
    	AND K60.TM_FC = K51.TM_FC
    	AND K60.TM_SEQ = K51.TM_SEQ
    	-- AND SUBSTR(K60.TM_FC, 0, 8) >= TO_CHAR(SYSDATE-5, 'YYYYMMDD') -- 최근 5일치
    	ORDER BY TM_FC DESC
   	) 
    WHERE ROWNUM <= 5
	]]>
</select>

<select id="get_aws_bonbu_list" parameterType="CommonMap" resultType="CommonMap">
	<![CDATA[
    SELECT  A.*,
        NVL(R.SUM_RN, 0) AVG_RAIN30, -- 평년 강수량
        FUNC_MAX_NUMBER(ROUND(NVL (A.AVG_RAIN, 0) / NVL(GREATEST(R.SUM_RN, 1), 1)*100), 1000) AS RATIO -- 평년 대비 강수량
    FROM
        (SELECT
            BONBU_CODE,
            BONBU_NM AS HO_NAME,
            ROUND(AVG(SUM_RN)) AVG_RAIN,
            LISTAGG(NAME, ',') WITHIN GROUP (ORDER BY NAME) AS AWS_NM
        FROM (
            SELECT *
                FROM
                (SELECT AWSID,NAME, BONBU_CODE, BONBU_NM FROM TB_CD_KMA_AWS_BONBU
                UNION
                SELECT AWSID,NAME, 0 BONBU_CODE, '전국' BONBU_NM FROM TB_CD_KMA_AWS_BONBU WHERE TOTAL_AVG_YN='Y'
                ) BONBU,
                (SELECT SUM (RN / 10) SUM_RN, STN_ID
                FROM TB_NJ_AWS_RAIN_1HR
                    WHERE TM BETWEEN #{s_start_date} || #{s_start_time} AND #{s_end_date} || #{s_end_time} GROUP BY STN_ID
                ) RAIN
                    WHERE BONBU.AWSID=RAIN.STN_ID(+))
                GROUP BY BONBU_CODE,BONBU_NM
                ORDER BY BONBU_CODE
            ) A,
        (SELECT
            BONBU_CODE,
            BONBU_NM,
            ROUND(AVG(SUM_RN)) SUM_RN -- 평년 강수량
            FROM
                (SELECT AWSID,NAME, BONBU_CODE, BONBU_NM FROM TB_CD_KMA_AWS_BONBU
                UNION
                SELECT AWSID,NAME, 0 BONBU_CODE, '전국' BONBU_NM FROM TB_CD_KMA_AWS_BONBU WHERE TOTAL_AVG_YN='Y'
                ) BONBU,
                (SELECT
                      AWSID STN_ID,
                      SUM (RN) SUM_RN
                    FROM TB_NJ_AWS_RAIN_AVG10_30
                    WHERE MMDD IN (
                                    SELECT
                                      TO_CHAR(YYYYMMDD, 'MMDD') MMDD
                                    FROM
                                    (
                                    SELECT
                                      TO_DATE (#{s_start_date}, 'YYYYMMDD') + LEVEL - 1 AS YYYYMMDD
                                    FROM DUAL CONNECT BY (TO_DATE (#{s_start_date}, 'YYYYMMDD') + LEVEL - 1) <= TO_DATE (#{s_end_date}, 'YYYYMMDD')
                                    )
                                  )
                    GROUP BY AWSID
                ) RAIN
            WHERE BONBU.AWSID=RAIN.STN_ID(+)
              AND RAIN.STN_ID NOT IN (SELECT * FROM TB_NJ_AWS_RAIN_AVG_NOT) -- 평년데이터가 부족한 경우
        GROUP BY BONBU_CODE, BONBU_NM
        ORDER BY BONBU_CODE
        ) R
    WHERE A.BONBU_CODE = R.BONBU_CODE
	]]>
</select>


<select id="get_aws_bonbu_sub_list" parameterType="CommonMap" resultType="CommonMap">
	<![CDATA[
    SELECT  A.*,
        DECODE(ARAN.AWSID, NULL, NVL(R.SUM_RN, 0), NULL) AVG_RAIN30, -- 평년 강수량
        DECODE(ARAN.AWSID, NULL, FUNC_MAX_NUMBER(ROUND(NVL (A.AVG_RAIN, 0) / NVL(GREATEST(R.SUM_RN, 1), 1)*100), 1000), NULL) AS RATIO -- 평년 대비 강수량
    FROM
        (SELECT
            AWSID,
            NAME AS HO_NAME,
            BONBU_CODE,
            BONBU_NM,
            SUM_RN AVG_RAIN
        FROM (
            SELECT
                *
            FROM
                (SELECT AWSID, NAME, BONBU_CODE, BONBU_NM FROM TB_CD_KMA_AWS_BONBU
                UNION
                SELECT AWSID, NAME, 0 BONBU_CODE, '전국' BONBU_NM FROM TB_CD_KMA_AWS_BONBU WHERE TOTAL_AVG_YN='Y'
                ) BONBU,
                (SELECT SUM (RN / 10) SUM_RN, STN_ID
                FROM TB_NJ_AWS_RAIN_1HR
                    WHERE TM BETWEEN #{s_start_date} || #{s_start_time} AND #{s_end_date} || #{s_end_time} GROUP BY STN_ID
                ) RAIN
            WHERE BONBU.AWSID=RAIN.STN_ID(+))
        ) A,
        (SELECT
              AWSID STN_ID,
              SUM (RN) SUM_RN
            FROM TB_NJ_AWS_RAIN_AVG10_30
            WHERE MMDD IN (
                SELECT  TO_CHAR(YYYYMMDD, 'MMDD') MMDD
                    FROM
                        (
                        SELECT
                          TO_DATE (#{s_start_date}, 'YYYYMMDD') + LEVEL - 1 AS YYYYMMDD
                        FROM DUAL CONNECT BY (TO_DATE (#{s_start_date}, 'YYYYMMDD') + LEVEL - 1) <= TO_DATE (#{s_end_date}, 'YYYYMMDD')
                        )
                    )
            AND AWSID NOT IN (SELECT * FROM TB_NJ_AWS_RAIN_AVG_NOT) -- 평년데이터가 부족한 경우
            GROUP BY AWSID
        ) R,
        TB_NJ_AWS_RAIN_AVG_NOT ARAN
    WHERE A.AWSID = R.STN_ID(+)
    AND   A.AWSID = ARAN.AWSID(+)
    ORDER BY HO_NAME
	]]>
</select>
</mapper>